Testing drawCard.
RANDOM TESTS.
ALL TESTS OK
File 'dominion.c'
Lines executed:7.28% of 563
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:2
        -:    0:Programs:2
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:
    11990:    9:int compare(const void* a, const void* b) {
    11990:   10:  if (*(int*)a > *(int*)b)
     6082:   11:    return 1;
     5908:   12:  if (*(int*)a < *(int*)b)
     5908:   13:    return -1;
    #####:   14:  return 0;
        -:   15:}
        -:   16:
    #####:   17:struct gameState* newGame() {
    #####:   18:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   19:  return g;
        -:   20:}
        -:   21:
    #####:   22:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   23:		  int k8, int k9, int k10) {
    #####:   24:  int* k = malloc(10 * sizeof(int));
    #####:   25:  k[0] = k1;
    #####:   26:  k[1] = k2;
    #####:   27:  k[2] = k3;
    #####:   28:  k[3] = k4;
    #####:   29:  k[4] = k5;
    #####:   30:  k[5] = k6;
    #####:   31:  k[6] = k7;
    #####:   32:  k[7] = k8;
    #####:   33:  k[8] = k9;
    #####:   34:  k[9] = k10;
    #####:   35:  return k;
        -:   36:}
        -:   37:
    #####:   38:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   39:		   struct gameState *state) {
        -:   40:
        -:   41:  int i;
        -:   42:  int j;
        -:   43:  int it;			
        -:   44:  //set up random number generator
    #####:   45:  SelectStream(1);
    #####:   46:  PutSeed((long)randomSeed);
        -:   47:  
        -:   48:  //check number of players
    #####:   49:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   50:    {
    #####:   51:      return -1;
        -:   52:    }
        -:   53:
        -:   54:  //set number of players
    #####:   55:  state->numPlayers = numPlayers;
        -:   56:
        -:   57:  //check selected kingdom cards are different
    #####:   58:  for (i = 0; i < 10; i++)
        -:   59:    {
    #####:   60:      for (j = 0; j < 10; j++)
        -:   61:        {
    #####:   62:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   63:	    {
    #####:   64:	      return -1;
        -:   65:	    }
        -:   66:        }
        -:   67:    }
        -:   68:
        -:   69:
        -:   70:  //initialize supply
        -:   71:  ///////////////////////////////
        -:   72:
        -:   73:  //set number of Curse cards
    #####:   74:  if (numPlayers == 2)
        -:   75:    {
    #####:   76:      state->supplyCount[curse] = 10;
        -:   77:    }
    #####:   78:  else if (numPlayers == 3)
        -:   79:    {
    #####:   80:      state->supplyCount[curse] = 20;
        -:   81:    }
        -:   82:  else
        -:   83:    {
    #####:   84:      state->supplyCount[curse] = 30;
        -:   85:    }
        -:   86:
        -:   87:  //set number of Victory cards
    #####:   88:  if (numPlayers == 2)
        -:   89:    {
    #####:   90:      state->supplyCount[estate] = 8;
    #####:   91:      state->supplyCount[duchy] = 8;
    #####:   92:      state->supplyCount[province] = 8;
        -:   93:    }
        -:   94:  else
        -:   95:    {
    #####:   96:      state->supplyCount[estate] = 12;
    #####:   97:      state->supplyCount[duchy] = 12;
    #####:   98:      state->supplyCount[province] = 12;
        -:   99:    }
        -:  100:
        -:  101:  //set number of Treasure cards
    #####:  102:  state->supplyCount[copper] = 60 - (7 * numPlayers);
    #####:  103:  state->supplyCount[silver] = 40;
    #####:  104:  state->supplyCount[gold] = 30;
        -:  105:
        -:  106:  //set number of Kingdom cards
    #####:  107:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  108:    {
    #####:  109:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  110:	{
    #####:  111:	  if (kingdomCards[j] == i)
        -:  112:	    {
        -:  113:	      //check if card is a 'Victory' Kingdom card
    #####:  114:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  115:		{
    #####:  116:		  if (numPlayers == 2){ 
    #####:  117:		    state->supplyCount[i] = 8; 
        -:  118:		  }
    #####:  119:		  else{ state->supplyCount[i] = 12; }
        -:  120:		}
        -:  121:	      else
        -:  122:		{
    #####:  123:		  state->supplyCount[i] = 10;
        -:  124:		}
    #####:  125:	      break;
        -:  126:	    }
        -:  127:	  else    //card is not in the set choosen for the game
        -:  128:	    {
    #####:  129:	      state->supplyCount[i] = -1;
        -:  130:	    }
        -:  131:	}
        -:  132:
        -:  133:    }
        -:  134:
        -:  135:  ////////////////////////
        -:  136:  //supply intilization complete
        -:  137:
        -:  138:  //set player decks
    #####:  139:  for (i = 0; i < numPlayers; i++)
        -:  140:    {
    #####:  141:      state->deckCount[i] = 0;
    #####:  142:      for (j = 0; j < 3; j++)
        -:  143:	{
    #####:  144:	  state->deck[i][j] = estate;
    #####:  145:	  state->deckCount[i]++;
        -:  146:	}
    #####:  147:      for (j = 3; j < 10; j++)
        -:  148:	{
    #####:  149:	  state->deck[i][j] = copper;
    #####:  150:	  state->deckCount[i]++;		
        -:  151:	}
        -:  152:    }
        -:  153:
        -:  154:  //shuffle player decks
    #####:  155:  for (i = 0; i < numPlayers; i++)
        -:  156:    {
    #####:  157:      if ( shuffle(i, state) < 0 )
        -:  158:	{
    #####:  159:	  return -1;
        -:  160:	}
        -:  161:    }
        -:  162:
        -:  163:  //draw player hands
    #####:  164:  for (i = 0; i < numPlayers; i++)
        -:  165:    {  
        -:  166:      //initialize hand size to zero
    #####:  167:      state->handCount[i] = 0;
    #####:  168:      state->discardCount[i] = 0;
        -:  169:      //draw 5 cards
        -:  170:      // for (j = 0; j < 5; j++)
        -:  171:      //	{
        -:  172:      //	  drawCard(i, state);
        -:  173:      //	}
        -:  174:    }
        -:  175:  
        -:  176:  //set embargo tokens to 0 for all supply piles
    #####:  177:  for (i = 0; i <= treasure_map; i++)
        -:  178:    {
    #####:  179:      state->embargoTokens[i] = 0;
        -:  180:    }
        -:  181:
        -:  182:  //initialize first player's turn
    #####:  183:  state->outpostPlayed = 0;
    #####:  184:  state->phase = 0;
    #####:  185:  state->numActions = 1;
    #####:  186:  state->numBuys = 1;
    #####:  187:  state->playedCardCount = 0;
    #####:  188:  state->whoseTurn = 0;
    #####:  189:  state->handCount[state->whoseTurn] = 0;
        -:  190:  //int it; move to top
        -:  191:
        -:  192:  //Moved draw cards to here, only drawing at the start of a turn
    #####:  193:  for (it = 0; it < 5; it++){
    #####:  194:    drawCard(state->whoseTurn, state);
        -:  195:  }
        -:  196:
    #####:  197:  updateCoins(state->whoseTurn, state, 0);
        -:  198:
    #####:  199:  return 0;
        -:  200:}
        -:  201:
        4:  202:int shuffle(int player, struct gameState *state) {
        -:  203: 
        -:  204:
        -:  205:  int newDeck[MAX_DECK];
        4:  206:  int newDeckPos = 0;
        -:  207:  int card;
        -:  208:  int i;
        -:  209:
        4:  210:  if (state->deckCount[player] < 1)
    #####:  211:    return -1;
        4:  212:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  213:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  214:
     1626:  215:  while (state->deckCount[player] > 0) {
     1618:  216:    card = floor(Random() * state->deckCount[player]);
     1618:  217:    newDeck[newDeckPos] = state->deck[player][card];
     1618:  218:    newDeckPos++;
   163444:  219:    for (i = card; i < state->deckCount[player]-1; i++) {
   161826:  220:      state->deck[player][i] = state->deck[player][i+1];
        -:  221:    }
     1618:  222:    state->deckCount[player]--;
        -:  223:  }
     1622:  224:  for (i = 0; i < newDeckPos; i++) {
     1618:  225:    state->deck[player][i] = newDeck[i];
     1618:  226:    state->deckCount[player]++;
        -:  227:  }
        -:  228:
        4:  229:  return 0;
        -:  230:}
        -:  231:
    #####:  232:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  233:{	
        -:  234:  int card;
    #####:  235:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  236:
        -:  237:  //check if it is the right phase
    #####:  238:  if (state->phase != 0)
        -:  239:    {
    #####:  240:      return -1;
        -:  241:    }
        -:  242:	
        -:  243:  //check if player has enough actions
    #####:  244:  if ( state->numActions < 1 )
        -:  245:    {
    #####:  246:      return -1;
        -:  247:    }
        -:  248:	
        -:  249:  //get card played
    #####:  250:  card = handCard(handPos, state);
        -:  251:	
        -:  252:  //check if selected card is an action
    #####:  253:  if ( card < adventurer || card > treasure_map )
        -:  254:    {
    #####:  255:      return -1;
        -:  256:    }
        -:  257:	
        -:  258:  //play card
    #####:  259:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  260:    {
    #####:  261:      return -1;
        -:  262:    }
        -:  263:	
        -:  264:  //reduce number of actions
    #####:  265:  state->numActions--;
        -:  266:
        -:  267:  //update coins (Treasure cards may be added with card draws)
    #####:  268:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  269:	
    #####:  270:  return 0;
        -:  271:}
        -:  272:
    #####:  273:int buyCard(int supplyPos, struct gameState *state) {
        -:  274:  int who;
        -:  275:  if (DEBUG){
        -:  276:    printf("Entering buyCard...\n");
        -:  277:  }
        -:  278:
        -:  279:  // I don't know what to do about the phase thing.
        -:  280:
    #####:  281:  who = state->whoseTurn;
        -:  282:
    #####:  283:  if (state->numBuys < 1){
        -:  284:    if (DEBUG)
        -:  285:      printf("You do not have any buys left\n");
    #####:  286:    return -1;
    #####:  287:  } else if (supplyCount(supplyPos, state) <1){
        -:  288:    if (DEBUG)
        -:  289:      printf("There are not any of that type of card left\n");
    #####:  290:    return -1;
    #####:  291:  } else if (state->coins < getCost(supplyPos)){
        -:  292:    if (DEBUG) 
        -:  293:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  294:    return -1;
        -:  295:  } else {
    #####:  296:    state->phase=1;
        -:  297:    //state->supplyCount[supplyPos]--;
    #####:  298:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  299:  
    #####:  300:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  301:    state->numBuys--;
        -:  302:    if (DEBUG)
        -:  303:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  304:  }
        -:  305:
        -:  306:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  307:  //state->discardCount[who]++;
        -:  308:    
    #####:  309:  return 0;
        -:  310:}
        -:  311:
    #####:  312:int numHandCards(struct gameState *state) {
    #####:  313:  return state->handCount[ whoseTurn(state) ];
        -:  314:}
        -:  315:
    #####:  316:int handCard(int handPos, struct gameState *state) {
    #####:  317:  int currentPlayer = whoseTurn(state);
    #####:  318:  return state->hand[currentPlayer][handPos];
        -:  319:}
        -:  320:
    #####:  321:int supplyCount(int card, struct gameState *state) {
    #####:  322:  return state->supplyCount[card];
        -:  323:}
        -:  324:
    #####:  325:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  326:  int i;
    #####:  327:  int count = 0;
        -:  328:
    #####:  329:  for (i = 0; i < state->deckCount[player]; i++)
        -:  330:    {
    #####:  331:      if (state->deck[player][i] == card) count++;
        -:  332:    }
        -:  333:
    #####:  334:  for (i = 0; i < state->handCount[player]; i++)
        -:  335:    {
    #####:  336:      if (state->hand[player][i] == card) count++;
        -:  337:    }
        -:  338:
    #####:  339:  for (i = 0; i < state->discardCount[player]; i++)
        -:  340:    {
    #####:  341:      if (state->discard[player][i] == card) count++;
        -:  342:    }
        -:  343:
    #####:  344:  return count;
        -:  345:}
        -:  346:
    #####:  347:int whoseTurn(struct gameState *state) {
    #####:  348:  return state->whoseTurn;
        -:  349:}
        -:  350:
    #####:  351:int endTurn(struct gameState *state) {
        -:  352:  int k;
        -:  353:  int i;
    #####:  354:  int currentPlayer = whoseTurn(state);
        -:  355:  
        -:  356:  //Discard hand
    #####:  357:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  358:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  359:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  360:  }
    #####:  361:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  362:    
        -:  363:  //Code for determining the player
    #####:  364:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  365:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  366:  }
        -:  367:  else{
    #####:  368:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  369:  }
        -:  370:
    #####:  371:  state->outpostPlayed = 0;
    #####:  372:  state->phase = 0;
    #####:  373:  state->numActions = 1;
    #####:  374:  state->coins = 0;
    #####:  375:  state->numBuys = 1;
    #####:  376:  state->playedCardCount = 0;
    #####:  377:  state->handCount[state->whoseTurn] = 0;
        -:  378:
        -:  379:  //int k; move to top
        -:  380:  //Next player draws hand
    #####:  381:  for (k = 0; k < 5; k++){
    #####:  382:    drawCard(state->whoseTurn, state);//Draw a card
        -:  383:  }
        -:  384:
        -:  385:  //Update money
    #####:  386:  updateCoins(state->whoseTurn, state , 0);
        -:  387:
    #####:  388:  return 0;
        -:  389:}
        -:  390:
    #####:  391:int isGameOver(struct gameState *state) {
        -:  392:  int i;
        -:  393:  int j;
        -:  394:	
        -:  395:  //if stack of Province cards is empty, the game ends
    #####:  396:  if (state->supplyCount[province] == 0)
        -:  397:    {
    #####:  398:      return 1;
        -:  399:    }
        -:  400:
        -:  401:  //if three supply pile are at 0, the game ends
    #####:  402:  j = 0;
    #####:  403:  for (i = 0; i < 25; i++)
        -:  404:    {
    #####:  405:      if (state->supplyCount[i] == 0)
        -:  406:	{
    #####:  407:	  j++;
        -:  408:	}
        -:  409:    }
    #####:  410:  if ( j >= 3)
        -:  411:    {
    #####:  412:      return 1;
        -:  413:    }
        -:  414:
    #####:  415:  return 0;
        -:  416:}
        -:  417:
    #####:  418:int scoreFor (int player, struct gameState *state) {
        -:  419:
        -:  420:  int i;
    #####:  421:  int score = 0;
        -:  422:  //score from hand
    #####:  423:  for (i = 0; i < state->handCount[player]; i++)
        -:  424:    {
    #####:  425:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  426:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  427:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  428:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  429:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  430:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  431:    }
        -:  432:
        -:  433:  //score from discard
    #####:  434:  for (i = 0; i < state->discardCount[player]; i++)
        -:  435:    {
    #####:  436:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  437:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  438:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  439:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  440:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  441:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  442:    }
        -:  443:
        -:  444:  //score from deck
    #####:  445:  for (i = 0; i < state->discardCount[player]; i++)
        -:  446:    {
    #####:  447:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  448:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  449:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  450:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  451:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  452:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  453:    }
        -:  454:
    #####:  455:  return score;
        -:  456:}
        -:  457:
    #####:  458:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  459:  int i;	
        -:  460:  int j;
        -:  461:  int highScore;
        -:  462:  int currentPlayer;
        -:  463:
        -:  464:  //get score for each player
    #####:  465:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  466:    {
        -:  467:      //set unused player scores to -9999
    #####:  468:      if (i >= state->numPlayers)
        -:  469:	{
    #####:  470:	  players[i] = -9999;
        -:  471:	}
        -:  472:      else
        -:  473:	{
    #####:  474:	  players[i] = scoreFor (i, state);
        -:  475:	}
        -:  476:    }
        -:  477:
        -:  478:  //find highest score
    #####:  479:  j = 0;
    #####:  480:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  481:    {
    #####:  482:      if (players[i] > players[j])
        -:  483:	{
    #####:  484:	  j = i;
        -:  485:	}
        -:  486:    }
    #####:  487:  highScore = players[j];
        -:  488:
        -:  489:  //add 1 to players who had less turns
    #####:  490:  currentPlayer = whoseTurn(state);
    #####:  491:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  492:    {
    #####:  493:      if ( players[i] == highScore && i > currentPlayer )
        -:  494:	{
    #####:  495:	  players[i]++;
        -:  496:	}
        -:  497:    }
        -:  498:
        -:  499:  //find new highest score
    #####:  500:  j = 0;
    #####:  501:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  502:    {
    #####:  503:      if ( players[i] > players[j] )
        -:  504:	{
    #####:  505:	  j = i;
        -:  506:	}
        -:  507:    }
    #####:  508:  highScore = players[j];
        -:  509:
        -:  510:  //set winners in array to 1 and rest to 0
    #####:  511:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  512:    {
    #####:  513:      if ( players[i] == highScore )
        -:  514:	{
    #####:  515:	  players[i] = 1;
        -:  516:	}
        -:  517:      else
        -:  518:	{
    #####:  519:	  players[i] = 0;
        -:  520:	}
        -:  521:    }
        -:  522:
    #####:  523:  return 0;
        -:  524:}
        -:  525:
     4000:  526:int drawCard(int player, struct gameState *state)
        -:  527:{	int count;
        -:  528:  int deckCounter;
     4000:  529:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  530:    
        -:  531:    //Step 1 Shuffle the discard pile back into a deck
        -:  532:    int i;
        -:  533:    //Move discard to deck
     1622:  534:    for (i = 0; i < state->discardCount[player];i++){
     1618:  535:      state->deck[player][i] = state->discard[player][i];
     1618:  536:      state->discard[player][i] = -1;
        -:  537:    }
        -:  538:
        4:  539:    state->deckCount[player] = state->discardCount[player];
        4:  540:    state->discardCount[player] = 0;//Reset discard
        -:  541:
        -:  542:    //Shufffle the deck
        4:  543:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  544:   
        -:  545:    if (DEBUG){//Debug statements
        -:  546:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  547:    }
        -:  548:    
        4:  549:    state->discardCount[player] = 0;
        -:  550:
        -:  551:    //Step 2 Draw Card
        4:  552:    count = state->handCount[player];//Get current player's hand count
        -:  553:    
        -:  554:    if (DEBUG){//Debug statements
        -:  555:      printf("Current hand count: %d\n", count);
        -:  556:    }
        -:  557:    
        4:  558:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  559:
        4:  560:    if (deckCounter == 0)
    #####:  561:      return -1;
        -:  562:
        4:  563:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        4:  564:    state->deckCount[player]--;
        4:  565:    state->handCount[player]++;//Increment hand count
        -:  566:  }
        -:  567:
        -:  568:  else{
     3996:  569:    int count = state->handCount[player];//Get current hand count for player
        -:  570:    int deckCounter;
        -:  571:    if (DEBUG){//Debug statements
        -:  572:      printf("Current hand count: %d\n", count);
        -:  573:    }
        -:  574:
     3996:  575:    deckCounter = state->deckCount[player];//Create holder for the deck count
     3996:  576:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     3996:  577:    state->deckCount[player]--;
     3996:  578:    state->handCount[player]++;//Increment hand count
        -:  579:  }
        -:  580:
     4000:  581:  return 0;
        -:  582:}
        -:  583:
    #####:  584:int getCost(int cardNumber)
        -:  585:{
    #####:  586:  switch( cardNumber ) 
        -:  587:    {
        -:  588:    case curse:
    #####:  589:      return 0;
        -:  590:    case estate:
    #####:  591:      return 2;
        -:  592:    case duchy:
    #####:  593:      return 5;
        -:  594:    case province:
    #####:  595:      return 8;
        -:  596:    case copper:
    #####:  597:      return 0;
        -:  598:    case silver:
    #####:  599:      return 3;
        -:  600:    case gold:
    #####:  601:      return 6;
        -:  602:    case adventurer:
    #####:  603:      return 6;
        -:  604:    case council_room:
    #####:  605:      return 5;
        -:  606:    case feast:
    #####:  607:      return 4;
        -:  608:    case gardens:
    #####:  609:      return 4;
        -:  610:    case mine:
    #####:  611:      return 5;
        -:  612:    case remodel:
    #####:  613:      return 4;
        -:  614:    case smithy:
    #####:  615:      return 4;
        -:  616:    case village:
    #####:  617:      return 3;
        -:  618:    case baron:
    #####:  619:      return 4;
        -:  620:    case great_hall:
    #####:  621:      return 3;
        -:  622:    case minion:
    #####:  623:      return 5;
        -:  624:    case steward:
    #####:  625:      return 3;
        -:  626:    case tribute:
    #####:  627:      return 5;
        -:  628:    case ambassador:
    #####:  629:      return 3;
        -:  630:    case cutpurse:
    #####:  631:      return 4;
        -:  632:    case embargo: 
    #####:  633:      return 2;
        -:  634:    case outpost:
    #####:  635:      return 5;
        -:  636:    case salvager:
    #####:  637:      return 4;
        -:  638:    case sea_hag:
    #####:  639:      return 4;
        -:  640:    case treasure_map:
    #####:  641:      return 4;
        -:  642:    }
        -:  643:	
    #####:  644:  return -1;
        -:  645:}
        -:  646:
        -:  647:/***********************************
        -:  648:Assignment-2 -- REFACTOR 5 CARDS:  first definition of new functions
        -:  649:**************************************/
    #####:  650:void cardIsAdventurer(int drawntreasure, struct gameState *state, int currentPlayer, int cardDrawn, int z, int temphand[MAX_HAND]){
    #####:  651:	while (drawntreasure < 2){
    #####:  652:		if (state->deckCount[currentPlayer] < 2){
        -:  653:			//if the deck is empty we need to shuffle discard and add to deck
    #####:  654:			shuffle(currentPlayer, state);
        -:  655:		}
    #####:  656:		drawCard(currentPlayer, state);
    #####:  657:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
    #####:  658:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  659:			drawntreasure++;
        -:  660:		else {
    #####:  661:			temphand[z] = cardDrawn;
    #####:  662:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  663:			z++;
        -:  664:		}
        -:  665:	}
        -:  666:
    #####:  667:	while (z - 1 >= 0){
    #####:  668:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
    #####:  669:		z = z - 1;
        -:  670:	}
    #####:  671:}
    #####:  672:void cardIsCouncilRoom(int i, int currentPlayer, struct gameState *state, int handPos) {
        -:  673:	//+3 Cards
    #####:  674:	for (i = 0; i < 3; i++){
    #####:  675:		drawCard(currentPlayer, state);
        -:  676:	}
        -:  677:
        -:  678:	//+1 Buy
    #####:  679:	state->numBuys++;
        -:  680:
        -:  681:	//Each other player draws a card
    #####:  682:	for (i = 0; i < state->numPlayers; i++){
    #####:  683:		if (i != currentPlayer){
    #####:  684:			drawCard(i, state);
        -:  685:		}
        -:  686:	}
        -:  687:
        -:  688:	//put played card in played card pile
    #####:  689:	discardCard(handPos, currentPlayer, state, 0);
    #####:  690:}
        -:  691:
    #####:  692:void cardIsSmithy(int i, int currentPlayer, struct gameState *state, int handPos) {
        -:  693:	//+4 Cards
    #####:  694:	for (i = 0; i < 4; i++){
    #####:  695:		drawCard(currentPlayer, state);
        -:  696:	}
        -:  697:
        -:  698:	//discard card from hand
    #####:  699:	discardCard(handPos, currentPlayer, state, 0);
    #####:  700:}
        -:  701:
    #####:  702:void cardIsVillage(int currentPlayer, struct gameState *state, int handPos) {
        -:  703:	//+1 Card
    #####:  704:	drawCard(currentPlayer, state);
        -:  705:
        -:  706:	//+2 Actions
    #####:  707:	state->numActions = state->numActions + 2;
        -:  708:
        -:  709:	//discard played card from hand
    #####:  710:	discardCard(handPos, currentPlayer, state, 0);
    #####:  711:}
        -:  712:
    #####:  713:void cardIsFeast(int i, struct gameState *state, int currentPlayer, int temphand[MAX_HAND], int x, int choice2){
        -:  714:	//gain card with cost up to 5
        -:  715:	//Backup hand
    #####:  716:	for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  717:		temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  718:		state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  719:	}
        -:  720:	//Backup hand
        -:  721:
        -:  722:	//Update Coins for Buy
    #####:  723:	updateCoins(currentPlayer, state, 5);
    #####:  724:	x = 1;//Condition to loop on
    #####:  725:	while (x == 1) {//Buy one card
    #####:  726:		if (supplyCount(choice2, state) <= 0){
        -:  727:			if (DEBUG)
        -:  728:				printf("None of that card left, sorry!\n");
        -:  729:
        -:  730:			if (DEBUG){
        -:  731:				printf("Cards Left: %d\n", supplyCount(choice2, state));
        -:  732:			}
        -:  733:		}
    #####:  734:		else if (state->coins < getCost(choice2)){
    #####:  735:			printf("That card is too expensive!\n");
        -:  736:
        -:  737:			if (DEBUG){
        -:  738:				printf("Coins: %d < %d\n", state->coins, getCost(choice2));
        -:  739:			}
        -:  740:		}
        -:  741:		else {
        -:  742:
        -:  743:			if (DEBUG){
        -:  744:				printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  745:			}
        -:  746:
    #####:  747:			gainCard(choice2, state, 0, currentPlayer);//Gain the card
    #####:  748:			x = 0;//No more buying cards
        -:  749:
        -:  750:			if (DEBUG){
        -:  751:				printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  752:			}
        -:  753:
        -:  754:		}
        -:  755:	}
        -:  756:
        -:  757:	//Reset Hand
    #####:  758:	for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  759:		state->hand[currentPlayer][i] = temphand[i];
    #####:  760:		temphand[i] = -1;
        -:  761:	}
        -:  762:	//Reset Hand
    #####:  763:}
        -:  764:
    #####:  765:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  766:{
        -:  767:  int i;
        -:  768:  int j;
        -:  769:  int k;
        -:  770:  int x;
        -:  771:  int index;
    #####:  772:  int currentPlayer = whoseTurn(state);
    #####:  773:  int nextPlayer = currentPlayer + 1;
        -:  774:
    #####:  775:  int tributeRevealedCards[2] = {-1, -1};
        -:  776:  int temphand[MAX_HAND];// moved above the if statement
    #####:  777:  int drawntreasure=0;
        -:  778:  int cardDrawn;
    #####:  779:  int z = 0;// this is the counter for the temp hand
    #####:  780:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  781:    nextPlayer = 0;
        -:  782:  }
        -:  783:  	
        -:  784:  //uses switch to select card and perform actions
    #####:  785:  switch( card ) 
        -:  786:    {
        -:  787:    case adventurer:
    #####:  788:		cardIsAdventurer(drawntreasure, state, currentPlayer, cardDrawn, z, temphand);
    #####:  789:		return 0;
        -:  790:     			
        -:  791:    case council_room:
    #####:  792:		cardIsCouncilRoom(i, currentPlayer, state, handPos);
    #####:  793:		return 0;
        -:  794:					
        -:  795:    case feast:
    #####:  796:		cardIsFeast(i, state, currentPlayer, temphand, x, choice2);
    #####:  797:		return 0;
        -:  798:					
        -:  799:    case gardens:
    #####:  800:      return -1;
        -:  801:			
        -:  802:    case mine:
    #####:  803:	   j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  804:
    #####:  805:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  806:	{
    #####:  807:	  return -1;
        -:  808:	}
        -:  809:		
    #####:  810:      if (choice2 > treasure_map || choice2 < curse)
        -:  811:	{
    #####:  812:	  return -1;
        -:  813:	}
        -:  814:
    #####:  815:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  816:	{
    #####:  817:	  return -1;
        -:  818:	}
        -:  819:
    #####:  820:      gainCard(choice2, state, 2, currentPlayer);
        -:  821:
        -:  822:      //discard card from hand
    #####:  823:      discardCard(handPos, currentPlayer, state, 0);
        -:  824:
        -:  825:      //discard trashed card
    #####:  826:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  827:	{
    #####:  828:	  if (state->hand[currentPlayer][i] == j)
        -:  829:	    {
    #####:  830:	      discardCard(i, currentPlayer, state, 0);			
    #####:  831:	      break;
        -:  832:	    }
        -:  833:	}		
    #####:  834:	return 0; 
        -:  835:			
        -:  836:    case remodel:
    #####:  837:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  838:
    #####:  839:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  840:	{
    #####:  841:	  return -1;
        -:  842:	}
        -:  843:
    #####:  844:      gainCard(choice2, state, 0, currentPlayer);
        -:  845:
        -:  846:      //discard card from hand
    #####:  847:      discardCard(handPos, currentPlayer, state, 0);
        -:  848:
        -:  849:      //discard trashed card
    #####:  850:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  851:	  {
    #####:  852:		  if (state->hand[currentPlayer][i] == j)
        -:  853:		  {
    #####:  854:			  discardCard(i, currentPlayer, state, 0);
    #####:  855:			  break;
        -:  856:		  }
        -:  857:	  }
    #####:  858:		return 0;
        -:  859:		
        -:  860:    case smithy:
    #####:  861:		cardIsSmithy(i, currentPlayer, state, handPos);
    #####:  862:		return 0;
        -:  863:      		
        -:  864:    case village:
    #####:  865:		cardIsVillage(currentPlayer, state, handPos);
    #####:  866:		return 0;		
        -:  867:		
        -:  868:    case baron:
    #####:  869:      state->numBuys++;//Increase buys by 1!
    #####:  870:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  871:	int p = 0;//Iterator for hand!
    #####:  872:	int card_not_discarded = 1;//Flag for discard set!
    #####:  873:	while(card_not_discarded){
    #####:  874:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  875:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  876:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  877:	    state->discardCount[currentPlayer]++;
    #####:  878:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  879:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  880:	    }
    #####:  881:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  882:	    state->handCount[currentPlayer]--;
    #####:  883:	    card_not_discarded = 0;//Exit the loop
        -:  884:	  }
    #####:  885:	  else if (p > state->handCount[currentPlayer]){
        -:  886:	    if(DEBUG) {
        -:  887:	      printf("No estate cards in your hand, invalid choice\n");
        -:  888:	      printf("Must gain an estate if there are any\n");
        -:  889:	    }
    #####:  890:	    if (supplyCount(estate, state) > 0){
    #####:  891:	      gainCard(estate, state, 0, currentPlayer);
    #####:  892:	      state->supplyCount[estate]--;//Decrement estates
    #####:  893:	      if (supplyCount(estate, state) == 0){
    #####:  894:		isGameOver(state);
        -:  895:	      }
        -:  896:	    }
    #####:  897:	    card_not_discarded = 0;//Exit the loop
        -:  898:	  }
        -:  899:			    
        -:  900:	  else{
    #####:  901:	    p++;//Next card
        -:  902:	  }
        -:  903:	}
        -:  904:      }
        -:  905:			    
        -:  906:      else{
    #####:  907:	if (supplyCount(estate, state) > 0){
    #####:  908:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  909:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  910:	  if (supplyCount(estate, state) == 0){
    #####:  911:	    isGameOver(state);
        -:  912:	  }
        -:  913:	}
        -:  914:      }
        -:  915:	    
        -:  916:      
    #####:  917:      return 0;
        -:  918:		
        -:  919:    case great_hall:
        -:  920:      //+1 Card
    #####:  921:      drawCard(currentPlayer, state);
        -:  922:			
        -:  923:      //+1 Actions
    #####:  924:      state->numActions++;
        -:  925:			
        -:  926:      //discard card from hand
    #####:  927:      discardCard(handPos, currentPlayer, state, 0);
    #####:  928:      return 0;
        -:  929:		
        -:  930:    case minion:
        -:  931:      //+1 action
    #####:  932:      state->numActions++;
        -:  933:			
        -:  934:      //discard card from hand
    #####:  935:      discardCard(handPos, currentPlayer, state, 0);
        -:  936:			
    #####:  937:      if (choice1)		//+2 coins
        -:  938:	{
    #####:  939:	  state->coins = state->coins + 2;
        -:  940:	}
        -:  941:			
    #####:  942:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  943:	{
        -:  944:	  //discard hand
    #####:  945:	  while(numHandCards(state) > 0)
        -:  946:	    {
    #####:  947:	      discardCard(handPos, currentPlayer, state, 0);
        -:  948:	    }
        -:  949:				
        -:  950:	  //draw 4
    #####:  951:	  for (i = 0; i < 4; i++)
        -:  952:	    {
    #####:  953:	      drawCard(currentPlayer, state);
        -:  954:	    }
        -:  955:				
        -:  956:	  //other players discard hand and redraw if hand size > 4
    #####:  957:	  for (i = 0; i < state->numPlayers; i++)
        -:  958:	    {
    #####:  959:	      if (i != currentPlayer)
        -:  960:		{
    #####:  961:		  if ( state->handCount[i] > 4 )
        -:  962:		    {
        -:  963:		      //discard hand
    #####:  964:		      while( state->handCount[i] > 0 )
        -:  965:			{
    #####:  966:			  discardCard(handPos, i, state, 0);
        -:  967:			}
        -:  968:							
        -:  969:		      //draw 4
    #####:  970:		      for (j = 0; j < 4; j++)
        -:  971:			{
    #####:  972:			  drawCard(i, state);
        -:  973:			}
        -:  974:		    }
        -:  975:		}
        -:  976:	    }
        -:  977:				
        -:  978:	}
    #####:  979:      return 0;
        -:  980:		
        -:  981:    case steward:
    #####:  982:      if (choice1 == 1)
        -:  983:	{
        -:  984:	  //+2 cards
    #####:  985:	  drawCard(currentPlayer, state);
    #####:  986:	  drawCard(currentPlayer, state);
        -:  987:	}
    #####:  988:      else if (choice1 == 2)
        -:  989:	{
        -:  990:	  //+2 coins
    #####:  991:	  state->coins = state->coins + 2;
        -:  992:	}
        -:  993:      else
        -:  994:	{
        -:  995:	  //trash 2 cards in hand
    #####:  996:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  997:	  discardCard(choice3, currentPlayer, state, 1);
        -:  998:	}
        -:  999:			
        -: 1000:      //discard card from hand
    #####: 1001:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1002:      return 0;
        -: 1003:		
        -: 1004:    case tribute:
    #####: 1005:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1006:	if (state->deckCount[nextPlayer] > 0){
    #####: 1007:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1008:	  state->deckCount[nextPlayer]--;
        -: 1009:	}
    #####: 1010:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1011:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1012:	  state->discardCount[nextPlayer]--;
        -: 1013:	}
        -: 1014:	else{
        -: 1015:	  //No Card to Reveal
        -: 1016:	  if (DEBUG){
        -: 1017:	    printf("No cards to reveal\n");
        -: 1018:	  }
        -: 1019:	}
        -: 1020:      }
        -: 1021:	    
        -: 1022:      else{
    #####: 1023:	if (state->deckCount[nextPlayer] == 0){
    #####: 1024:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1025:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1026:	    state->deckCount[nextPlayer]++;
    #####: 1027:	    state->discard[nextPlayer][i] = -1;
    #####: 1028:	    state->discardCount[nextPlayer]--;
        -: 1029:	  }
        -: 1030:			    
    #####: 1031:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1032:	} 
    #####: 1033:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1034:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1035:	state->deckCount[nextPlayer]--;
    #####: 1036:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1037:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1038:	state->deckCount[nextPlayer]--;
        -: 1039:      }    
        -: 1040:		       
    #####: 1041:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1042:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1043:	state->playedCardCount++;
    #####: 1044:	tributeRevealedCards[1] = -1;
        -: 1045:      }
        -: 1046:
    #####: 1047:      for (i = 0; i <= 2; i ++){
    #####: 1048:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1049:	  state->coins += 2;
        -: 1050:	}
        -: 1051:		    
    #####: 1052:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1053:	  drawCard(currentPlayer, state);
    #####: 1054:	  drawCard(currentPlayer, state);
        -: 1055:	}
        -: 1056:	else{//Action Card
    #####: 1057:	  state->numActions = state->numActions + 2;
        -: 1058:	}
        -: 1059:      }
        -: 1060:	    
    #####: 1061:      return 0;
        -: 1062:		
        -: 1063:    case ambassador:
    #####: 1064:      j = 0;		//used to check if player has enough cards to discard
        -: 1065:
    #####: 1066:      if (choice2 > 2 || choice2 < 0)
        -: 1067:	{
    #####: 1068:	  return -1;				
        -: 1069:	}
        -: 1070:
    #####: 1071:      if (choice1 == handPos)
        -: 1072:	{
    #####: 1073:	  return -1;
        -: 1074:	}
        -: 1075:
    #####: 1076:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1077:	{
    #####: 1078:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1079:	    {
    #####: 1080:	      j++;
        -: 1081:	    }
        -: 1082:	}
    #####: 1083:      if (j < choice2)
        -: 1084:	{
    #####: 1085:	  return -1;				
        -: 1086:	}
        -: 1087:
        -: 1088:      if (DEBUG) 
        -: 1089:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1090:
        -: 1091:      //increase supply count for choosen card by amount being discarded
    #####: 1092:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1093:			
        -: 1094:      //each other player gains a copy of revealed card
    #####: 1095:      for (i = 0; i < state->numPlayers; i++)
        -: 1096:	{
    #####: 1097:	  if (i != currentPlayer)
        -: 1098:	    {
    #####: 1099:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1100:	    }
        -: 1101:	}
        -: 1102:
        -: 1103:      //discard played card from hand
    #####: 1104:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1105:
        -: 1106:      //trash copies of cards returned to supply
    #####: 1107:      for (j = 0; j < choice2; j++)
        -: 1108:	{
    #####: 1109:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1110:	    {
    #####: 1111:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1112:		{
    #####: 1113:		  discardCard(i, currentPlayer, state, 1);
    #####: 1114:		  break;
        -: 1115:		}
        -: 1116:	    }
        -: 1117:	}			
        -: 1118:
    #####: 1119:      return 0;
        -: 1120:		
        -: 1121:    case cutpurse:
        -: 1122:
    #####: 1123:      updateCoins(currentPlayer, state, 2);
    #####: 1124:      for (i = 0; i < state->numPlayers; i++)
        -: 1125:	{
    #####: 1126:	  if (i != currentPlayer)
        -: 1127:	    {
    #####: 1128:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1129:		{
    #####: 1130:		  if (state->hand[i][j] == copper)
        -: 1131:		    {
    #####: 1132:		      discardCard(j, i, state, 0);
    #####: 1133:		      break;
        -: 1134:		    }
    #####: 1135:		  if (j == state->handCount[i])
        -: 1136:		    {
    #####: 1137:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1138:			{
        -: 1139:			  if (DEBUG)
        -: 1140:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1141:			}	
    #####: 1142:		      break;
        -: 1143:		    }		
        -: 1144:		}
        -: 1145:					
        -: 1146:	    }
        -: 1147:				
        -: 1148:	}				
        -: 1149:
        -: 1150:      //discard played card from hand
    #####: 1151:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1152:
    #####: 1153:      return 0;
        -: 1154:
        -: 1155:		
        -: 1156:    case embargo: 
        -: 1157:      //+2 Coins
    #####: 1158:      state->coins = state->coins + 2;
        -: 1159:			
        -: 1160:      //see if selected pile is in play
    #####: 1161:      if ( state->supplyCount[choice1] == -1 )
        -: 1162:	{
    #####: 1163:	  return -1;
        -: 1164:	}
        -: 1165:			
        -: 1166:      //add embargo token to selected supply pile
    #####: 1167:      state->embargoTokens[choice1]++;
        -: 1168:			
        -: 1169:      //trash card
    #####: 1170:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1171:      return 0;
        -: 1172:		
        -: 1173:    case outpost:
        -: 1174:      //set outpost flag
    #####: 1175:      state->outpostPlayed++;
        -: 1176:			
        -: 1177:      //discard card
    #####: 1178:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1179:      return 0;
        -: 1180:		
        -: 1181:    case salvager:
        -: 1182:      //+1 buy
    #####: 1183:      state->numBuys++;
        -: 1184:			
    #####: 1185:      if (choice1)
        -: 1186:	{
        -: 1187:	  //gain coins equal to trashed card
    #####: 1188:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1189:	  //trash card
    #####: 1190:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1191:	}
        -: 1192:			
        -: 1193:      //discard card
    #####: 1194:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1195:      return 0;
        -: 1196:		
        -: 1197:    case sea_hag:
    #####: 1198:      for (i = 0; i < state->numPlayers; i++){
    #####: 1199:	if (i != currentPlayer){
    #####: 1200:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1201:	  state->discardCount[i]++;
    #####: 1202:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1203:	}
        -: 1204:      }
    #####: 1205:      return 0;
        -: 1206:		
        -: 1207:    case treasure_map:
        -: 1208:      //search hand for another treasure_map
    #####: 1209:      index = -1;
    #####: 1210:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1211:	{
    #####: 1212:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1213:	    {
    #####: 1214:	      index = i;
    #####: 1215:	      break;
        -: 1216:	    }
        -: 1217:	}
    #####: 1218:      if (index > -1)
        -: 1219:	{
        -: 1220:	  //trash both treasure cards
    #####: 1221:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1222:	  discardCard(index, currentPlayer, state, 1);
        -: 1223:
        -: 1224:	  //gain 4 Gold cards
    #####: 1225:	  for (i = 0; i < 4; i++)
        -: 1226:	    {
    #####: 1227:	      gainCard(gold, state, 1, currentPlayer);
        -: 1228:	    }
        -: 1229:				
        -: 1230:	  //return success
    #####: 1231:	  return 1;
        -: 1232:	}
        -: 1233:			
        -: 1234:      //no second treasure_map found in hand
    #####: 1235:      return -1;
        -: 1236:    }
        -: 1237:	
    #####: 1238:  return -1;
        -: 1239:}
        -: 1240:
    #####: 1241:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1242:{
        -: 1243:	
        -: 1244:  //if card is not trashed, added to Played pile 
    #####: 1245:  if (trashFlag < 1)
        -: 1246:    {
        -: 1247:      //add card to played pile
    #####: 1248:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1249:      state->playedCardCount++;
        -: 1250:    }
        -: 1251:	
        -: 1252:  //set played card to -1
    #####: 1253:  state->hand[currentPlayer][handPos] = -1;
        -: 1254:	
        -: 1255:  //remove card from player's hand
    #####: 1256:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1257:    {
        -: 1258:      //reduce number of cards in hand
    #####: 1259:      state->handCount[currentPlayer]--;
        -: 1260:    }
    #####: 1261:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1262:    {
        -: 1263:      //reduce number of cards in hand
    #####: 1264:      state->handCount[currentPlayer]--;
        -: 1265:    }
        -: 1266:  else 	
        -: 1267:    {
        -: 1268:      //replace discarded card with last card in hand
    #####: 1269:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1270:      //set last card to -1
    #####: 1271:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1272:      //reduce number of cards in hand
    #####: 1273:      state->handCount[currentPlayer]--;
        -: 1274:    }
        -: 1275:	
    #####: 1276:  return 0;
        -: 1277:}
        -: 1278:
    #####: 1279:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1280:{
        -: 1281:  //Note: supplyPos is enum of choosen card
        -: 1282:	
        -: 1283:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1284:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1285:    {
    #####: 1286:      return -1;
        -: 1287:    }
        -: 1288:	
        -: 1289:  //added card for [whoseTurn] current player:
        -: 1290:  // toFlag = 0 : add to discard
        -: 1291:  // toFlag = 1 : add to deck
        -: 1292:  // toFlag = 2 : add to hand
        -: 1293:
    #####: 1294:  if (toFlag == 1)
        -: 1295:    {
    #####: 1296:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1297:      state->deckCount[player]++;
        -: 1298:    }
    #####: 1299:  else if (toFlag == 2)
        -: 1300:    {
    #####: 1301:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1302:      state->handCount[player]++;
        -: 1303:    }
        -: 1304:  else
        -: 1305:    {
    #####: 1306:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1307:      state->discardCount[player]++;
        -: 1308:    }
        -: 1309:	
        -: 1310:  //decrease number in supply pile
    #####: 1311:  state->supplyCount[supplyPos]--;
        -: 1312:	 
    #####: 1313:  return 0;
        -: 1314:}
        -: 1315:
    #####: 1316:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1317:{
        -: 1318:  int i;
        -: 1319:	
        -: 1320:  //reset coin count
    #####: 1321:  state->coins = 0;
        -: 1322:
        -: 1323:  //add coins for each Treasure card in player's hand
    #####: 1324:  for (i = 0; i < state->handCount[player]; i++)
        -: 1325:    {
    #####: 1326:      if (state->hand[player][i] == copper)
        -: 1327:	{
    #####: 1328:	  state->coins += 1;
        -: 1329:	}
    #####: 1330:      else if (state->hand[player][i] == silver)
        -: 1331:	{
    #####: 1332:	  state->coins += 2;
        -: 1333:	}
    #####: 1334:      else if (state->hand[player][i] == gold)
        -: 1335:	{
    #####: 1336:	  state->coins += 3;
        -: 1337:	}	
        -: 1338:    }	
        -: 1339:
        -: 1340:  //add bonus
    #####: 1341:  state->coins += bonus;
        -: 1342:
    #####: 1343:  return 0;
        -: 1344:}
        -: 1345:
        -: 1346:
        -: 1347://end of dominion.c
        -: 1348:
----------------- Testing Card: council_room ----------------
TEST 1: choice1 = 1 = +4 cards
hand count = 7, expected = 9
----------------- Testing Card: council_room ----------------
TEST 1: choice1 = 1 = +4 cards
hand count = 7, expected = 9
----------------- Testing Card: council_room ----------------
TEST 1: choice1 = 1 = +4 cards
hand count = 7, expected = 8 
----------------- Testing Card: council_room ----------------
TEST 1: choice1 = 1 = +4 cards
hand count = 8, expected = 8 
TEST 2: choice1 = 2 = +1 buy
buy count = 2, expected = 2
TEST 3: choice1 = 3 = +4 cards -1 discard card
hand count = 8, expected = 7
----------------- Testing Card: council_room ----------------
TEST 1: choice1 = 1 = +4 cards
hand count = 8, expected = 9 
----------------- Testing Card: council_room ----------------
TEST 1: choice1 = 1 = +4 cards
hand count = 9, expected = 9 
----------------- Testing Card: council_room ----------------
TEST 1: choice1 = 1 = +4 cards
hand count = 9, expected = 9 
TEST 2: choice1 = 2 = +1 buy
buy count = 2, expected = 2
TEST 3: choice1 = 3 = +4 cards -1 discard card
hand count = 8, expected = 8
TEST 4: choice1 = 4 = +1 card for every other player
hand count = 5, expected = 9
----------------- Testing Card: council_room ----------------
TEST 1: choice1 = 1 = +4 cards
hand count = 9, expected = 9 
TEST 2: choice1 = 2 = +1 buy
buy count = 2, expected = 2
TEST 3: choice1 = 3 = +4 cards -1 discard card
hand count = 8, expected = 8
TEST 4: choice1 = 4 = +1 card for every other player
hand count = 0, expected = 9
----------------- Testing Card: council_room ----------------
TEST 1: choice1 = 1 = +4 cards
hand count = 9, expected = 9 
TEST 2: choice1 = 2 = +1 buy
buy count = 2, expected = 2
TEST 3: choice1 = 3 = +4 cards -1 discard card
hand count = 8, expected = 8
TEST 4: choice1 = 4 = +1 card for every other player
hand count = 5, expected = 5
hand count = 5, expected = 6
----------------- Testing Card: council_room ----------------
TEST 1: choice1 = 1 = +4 cards
hand count = 9, expected = 9 
TEST 2: choice1 = 2 = +1 buy
buy count = 2, expected = 2
TEST 3: choice1 = 3 = +4 cards -1 discard card
hand count = 8, expected = 8
TEST 4: choice1 = 4 = +1 card for every other player
hand count = 1, expected = 5
----------------- Testing Card: council_room ----------------
TEST 1: choice1 = 1 = +4 cards
hand count = 9, expected = 9 
TEST 2: choice1 = 2 = +1 buy
buy count = 2, expected = 2
TEST 3: choice1 = 3 = +4 cards -1 discard card
hand count = 8, expected = 8
TEST 4: choice1 = 4 = +1 card for every other player
hand count = 6, expected = 5
----------------- Testing Card: council_room ----------------
TEST 1: choice1 = 1 = +4 cards
hand count = 9, expected = 9 
TEST 2: choice1 = 2 = +1 buy
buy count = 2, expected = 2
TEST 3: choice1 = 3 = +4 cards -1 discard card
hand count = 8, expected = 8
TEST 4: choice1 = 4 = +1 card for every other player
hand count = 6, expected = 5
----------------- Testing Card: council_room ----------------
TEST 1: choice1 = 1 = +4 cards
hand count = 9, expected = 9 
TEST 2: choice1 = 2 = +1 buy
buy count = 2, expected = 2
TEST 3: choice1 = 3 = +4 cards -1 discard card
hand count = 8, expected = 8
TEST 4: choice1 = 4 = +1 card for every other player
hand count = 6, expected = 5
----------------- Testing Card: council_room ----------------
TEST 1: choice1 = 1 = +4 cards
hand count = 9, expected = 9 
TEST 2: choice1 = 2 = +1 buy
buy count = 2, expected = 2
TEST 3: choice1 = 3 = +4 cards -1 discard card
hand count = 8, expected = 8
TEST 4: choice1 = 4 = +1 card for every other player
hand count = 6, expected = 5
----------------- Testing Card: council_room ----------------
TEST 1: choice1 = 1 = +4 cards
hand count = 9, expected = 9 
TEST 2: choice1 = 2 = +1 buy
buy count = 2, expected = 2
TEST 3: choice1 = 3 = +4 cards -1 discard card
hand count = 8, expected = 8
TEST 4: choice1 = 4 = +1 card for every other player
hand count = 6, expected = 5
----------------- Testing Card: council_room ----------------
TEST 1: choice1 = 1 = +4 cards
hand count = 9, expected = 9 
TEST 2: choice1 = 2 = +1 buy
buy count = 2, expected = 2
TEST 3: choice1 = 3 = +4 cards -1 discard card
hand count = 8, expected = 8
TEST 4: choice1 = 4 = +1 card for every other player
hand count = 6, expected = 6
 >>>>> SUCCESS: Testing complete council_room <<<<<

----------------- Testing Card: smithy ----------------
TEST 1: choice1 = 1 = +3 cards
t1 hand count = 8, expected = 8
TEST 2: choice1 = 2 = +3 cards -1 discard card
t2 hand count = 7, expected = 7

 >>>>> SUCCESS: Testing complete smithy <<<<<

----------------- Testing Card: village ----------------
TEST 1: choice1 = 1 = +1 card
t1 hand count = 8, expected = 8
TEST 2: choice1 = 2 = +2 actions
t2 action count = 3, expected = 3
TEST 3: choice1 = 3 = -1 card
t3 hand count = 5, expected = 7
----------------- Testing Card: council_room ----------------
TEST 1: choice1 = 1 = +4 cards
hand count = 9, expected = 9 
TEST 2: choice1 = 2 = +1 buy
buy count = 2, expected = 2
TEST 3: choice1 = 3 = +4 cards -1 discard card
hand count = 8, expected = 8
TEST 4: choice1 = 4 = +1 card for every other player
hand count = 6, expected = 6
 >>>>> SUCCESS: Testing complete council_room <<<<<

----------------- Testing Card: smithy ----------------
TEST 1: choice1 = 1 = +3 cards
t1 hand count = 8, expected = 8
TEST 2: choice1 = 2 = +3 cards -1 discard card
t2 hand count = 7, expected = 7

 >>>>> SUCCESS: Testing complete smithy <<<<<

----------------- Testing Card: village ----------------
TEST 1: choice1 = 1 = +1 card
t1 hand count = 8, expected = 8
TEST 2: choice1 = 2 = +2 actions
t2 action count = 3, expected = 3
TEST 3: choice1 = 3 = -1 card
t3 hand count = 7, expected = 7
----------------- Testing Card: council_room ----------------
TEST 1: choice1 = 1 = +4 cards
hand count = 9, expected = 9 
TEST 2: choice1 = 2 = +1 buy
buy count = 2, expected = 2
TEST 3: choice1 = 3 = +4 cards -1 discard card
hand count = 8, expected = 8
TEST 4: choice1 = 4 = +1 card for every other player
hand count = 6, expected = 6
 >>>>> SUCCESS: Testing complete council_room <<<<<

----------------- Testing Card: smithy ----------------
TEST 1: choice1 = 1 = +3 cards
t1 hand count = 8, expected = 8
TEST 2: choice1 = 2 = +3 cards -1 discard card
t2 hand count = 7, expected = 7

 >>>>> SUCCESS: Testing complete smithy <<<<<

----------------- Testing Card: village ----------------
TEST 1: choice1 = 1 = +1 card
t1 hand count = 8, expected = 8
TEST 2: choice1 = 2 = +2 actions
t2 action count = 3, expected = 3
TEST 3: choice1 = 3 = -1 card
t3 hand count = 7, expected = 7

 >>>>> SUCCESS: Testing complete village <<<<<

----------------- Testing Card: adventurer ----------------
TEST 1: choice1 = 1 = do shuffle if low on cards
deck count = 3, expected > = 2
TEST 2: choice1 = 2 = +1 card
hand count = 7, expected = 6
----------------- Testing Card: council_room ----------------
TEST 1: choice1 = 1 = +4 cards
hand count = 9, expected = 9 
TEST 2: choice1 = 2 = +1 buy
buy count = 2, expected = 2
TEST 3: choice1 = 3 = +4 cards -1 discard card
hand count = 8, expected = 8
TEST 4: choice1 = 4 = +1 card for every other player
hand count = 6, expected = 6
 >>>>> SUCCESS: Testing complete council_room <<<<<

----------------- Testing Card: smithy ----------------
TEST 1: choice1 = 1 = +3 cards
t1 hand count = 8, expected = 8
TEST 2: choice1 = 2 = +3 cards -1 discard card
t2 hand count = 7, expected = 7

 >>>>> SUCCESS: Testing complete smithy <<<<<

----------------- Testing Card: village ----------------
TEST 1: choice1 = 1 = +1 card
t1 hand count = 8, expected = 8
TEST 2: choice1 = 2 = +2 actions
t2 action count = 3, expected = 3
TEST 3: choice1 = 3 = -1 card
t3 hand count = 7, expected = 7

 >>>>> SUCCESS: Testing complete village <<<<<

----------------- Testing Card: adventurer ----------------
TEST 1: choice1 = 1 = do shuffle if low on cards
deck count = 3, expected > = 2
TEST 2: choice1 = 2 = +1 card
hand count = 8, expected = 6
----------------- Testing Card: council_room ----------------
TEST 1: choice1 = 1 = +4 cards
hand count = 9, expected = 9 
TEST 2: choice1 = 2 = +1 buy
buy count = 2, expected = 2
TEST 3: choice1 = 3 = +4 cards -1 discard card
hand count = 8, expected = 8
TEST 4: choice1 = 4 = +1 card for every other player
hand count = 6, expected = 6
 >>>>> SUCCESS: Testing complete council_room <<<<<

----------------- Testing Card: smithy ----------------
TEST 1: choice1 = 1 = +3 cards
t1 hand count = 8, expected = 8
TEST 2: choice1 = 2 = +3 cards -1 discard card
t2 hand count = 7, expected = 7

 >>>>> SUCCESS: Testing complete smithy <<<<<

----------------- Testing Card: village ----------------
TEST 1: choice1 = 1 = +1 card
t1 hand count = 8, expected = 8
TEST 2: choice1 = 2 = +2 actions
t2 action count = 3, expected = 3
TEST 3: choice1 = 3 = -1 card
t3 hand count = 7, expected = 7

 >>>>> SUCCESS: Testing complete village <<<<<

----------------- Testing Card: adventurer ----------------
TEST 1: choice1 = 1 = do shuffle if low on cards
deck count = 3, expected > = 2
TEST 2: choice1 = 2 = +1 card
hand count = 7, expected = 6
----------------- Testing Card: council_room ----------------
TEST 1: choice1 = 1 = +4 cards
hand count = 9, expected = 9 
TEST 2: choice1 = 2 = +1 buy
buy count = 2, expected = 2
TEST 3: choice1 = 3 = +4 cards -1 discard card
hand count = 8, expected = 8
TEST 4: choice1 = 4 = +1 card for every other player
hand count = 6, expected = 6
 >>>>> SUCCESS: Testing complete council_room <<<<<

----------------- Testing Card: smithy ----------------
TEST 1: choice1 = 1 = +3 cards
t1 hand count = 8, expected = 8
TEST 2: choice1 = 2 = +3 cards -1 discard card
t2 hand count = 7, expected = 7

 >>>>> SUCCESS: Testing complete smithy <<<<<

----------------- Testing Card: village ----------------
TEST 1: choice1 = 1 = +1 card
t1 hand count = 8, expected = 8
TEST 2: choice1 = 2 = +2 actions
t2 action count = 3, expected = 3
TEST 3: choice1 = 3 = -1 card
t3 hand count = 7, expected = 7

 >>>>> SUCCESS: Testing complete village <<<<<

----------------- Testing Card: adventurer ----------------
TEST 1: choice1 = 1 = do shuffle if low on cards
deck count = 3, expected > = 2
TEST 2: choice1 = 2 = +1 card
hand count = 6, expected = 6
TEST 3: choice1 = 3 = -1 discard
hand count = 7, expected = 6
----------------- Testing Card: council_room ----------------
TEST 1: choice1 = 1 = +4 cards
hand count = 9, expected = 9 
TEST 2: choice1 = 2 = +1 buy
buy count = 2, expected = 2
TEST 3: choice1 = 3 = +4 cards -1 discard card
hand count = 8, expected = 8
TEST 4: choice1 = 4 = +1 card for every other player
hand count = 6, expected = 6
 >>>>> SUCCESS: Testing complete council_room <<<<<

----------------- Testing Card: smithy ----------------
TEST 1: choice1 = 1 = +3 cards
t1 hand count = 8, expected = 8
TEST 2: choice1 = 2 = +3 cards -1 discard card
t2 hand count = 7, expected = 7

 >>>>> SUCCESS: Testing complete smithy <<<<<

----------------- Testing Card: village ----------------
TEST 1: choice1 = 1 = +1 card
t1 hand count = 8, expected = 8
TEST 2: choice1 = 2 = +2 actions
t2 action count = 3, expected = 3
TEST 3: choice1 = 3 = -1 card
t3 hand count = 7, expected = 7

 >>>>> SUCCESS: Testing complete village <<<<<

----------------- Testing Card: adventurer ----------------
TEST 1: choice1 = 1 = do shuffle if low on cards
deck count = 3, expected > = 2
TEST 2: choice1 = 2 = +1 card
hand count = 6, expected = 6
TEST 3: choice1 = 3 = -1 discard
hand count = 7, expected = 6
----------------- Testing Card: council_room ----------------
TEST 1: choice1 = 1 = +4 cards
hand count = 9, expected = 9 
TEST 2: choice1 = 2 = +1 buy
buy count = 2, expected = 2
TEST 3: choice1 = 3 = +4 cards -1 discard card
hand count = 8, expected = 8
TEST 4: choice1 = 4 = +1 card for every other player
hand count = 6, expected = 6
 >>>>> SUCCESS: Testing complete council_room <<<<<

----------------- Testing Card: smithy ----------------
TEST 1: choice1 = 1 = +3 cards
t1 hand count = 8, expected = 8
TEST 2: choice1 = 2 = +3 cards -1 discard card
t2 hand count = 7, expected = 7

 >>>>> SUCCESS: Testing complete smithy <<<<<

----------------- Testing Card: village ----------------
TEST 1: choice1 = 1 = +1 card
t1 hand count = 8, expected = 8
TEST 2: choice1 = 2 = +2 actions
t2 action count = 3, expected = 3
TEST 3: choice1 = 3 = -1 card
t3 hand count = 7, expected = 7

 >>>>> SUCCESS: Testing complete village <<<<<

----------------- Testing Card: adventurer ----------------
TEST 1: choice1 = 1 = do shuffle if low on cards
deck count = 3, expected > = 2
TEST 2: choice1 = 2 = +1 card
hand count = 6, expected = 6
TEST 3: choice1 = 3 = -1 discard
hand count = 7, expected = 6
----------------- Testing Card: council_room ----------------
TEST 1: choice1 = 1 = +4 cards
hand count = 9, expected = 9 
TEST 2: choice1 = 2 = +1 buy
buy count = 2, expected = 2
TEST 3: choice1 = 3 = +4 cards -1 discard card
hand count = 8, expected = 8
TEST 4: choice1 = 4 = +1 card for every other player
hand count = 6, expected = 6
 >>>>> SUCCESS: Testing complete council_room <<<<<

----------------- Testing Card: smithy ----------------
TEST 1: choice1 = 1 = +3 cards
t1 hand count = 8, expected = 8
TEST 2: choice1 = 2 = +3 cards -1 discard card
t2 hand count = 7, expected = 7

 >>>>> SUCCESS: Testing complete smithy <<<<<

----------------- Testing Card: village ----------------
TEST 1: choice1 = 1 = +1 card
t1 hand count = 8, expected = 8
TEST 2: choice1 = 2 = +2 actions
t2 action count = 3, expected = 3
TEST 3: choice1 = 3 = -1 card
t3 hand count = 7, expected = 7

 >>>>> SUCCESS: Testing complete village <<<<<

----------------- Testing Card: adventurer ----------------
TEST 1: choice1 = 1 = do shuffle if low on cards
deck count = 3, expected > = 2
TEST 2: choice1 = 2 = +1 card
hand count = 6, expected = 6
TEST 3: choice1 = 3 = -1 discard
hand count = 7, expected = 6
----------------- Testing Card: council_room ----------------
TEST 1: choice1 = 1 = +4 cards
hand count = 9, expected = 9 
TEST 2: choice1 = 2 = +1 buy
buy count = 2, expected = 2
TEST 3: choice1 = 3 = +4 cards -1 discard card
hand count = 8, expected = 8
TEST 4: choice1 = 4 = +1 card for every other player
hand count = 6, expected = 6
 >>>>> SUCCESS: Testing complete council_room <<<<<

----------------- Testing Card: smithy ----------------
TEST 1: choice1 = 1 = +3 cards
t1 hand count = 8, expected = 8
TEST 2: choice1 = 2 = +3 cards -1 discard card
t2 hand count = 7, expected = 7

 >>>>> SUCCESS: Testing complete smithy <<<<<

----------------- Testing Card: village ----------------
TEST 1: choice1 = 1 = +1 card
t1 hand count = 8, expected = 8
TEST 2: choice1 = 2 = +2 actions
t2 action count = 3, expected = 3
TEST 3: choice1 = 3 = -1 card
t3 hand count = 7, expected = 7

 >>>>> SUCCESS: Testing complete village <<<<<

----------------- Testing Card: adventurer ----------------
TEST 1: choice1 = 1 = do shuffle if low on cards
deck count = 3, expected > = 2 
TEST 2: choice1 = 2 = +1 card
hand count = 6, expected = 7
----------------- Testing Card: council_room ----------------
TEST 1: choice1 = 1 = +4 cards
hand count = 9, expected = 9 
TEST 2: choice1 = 2 = +1 buy
buy count = 2, expected = 2
TEST 3: choice1 = 3 = +4 cards -1 discard card
hand count = 8, expected = 8
TEST 4: choice1 = 4 = +1 card for every other player
hand count = 6, expected = 6
 >>>>> SUCCESS: Testing complete council_room <<<<<

----------------- Testing Card: smithy ----------------
TEST 1: choice1 = 1 = +3 cards
t1 hand count = 8, expected = 8
TEST 2: choice1 = 2 = +3 cards -1 discard card
t2 hand count = 7, expected = 7

 >>>>> SUCCESS: Testing complete smithy <<<<<

----------------- Testing Card: village ----------------
TEST 1: choice1 = 1 = +1 card
t1 hand count = 8, expected = 8
TEST 2: choice1 = 2 = +2 actions
t2 action count = 3, expected = 3
TEST 3: choice1 = 3 = -1 card
t3 hand count = 7, expected = 7

 >>>>> SUCCESS: Testing complete village <<<<<

----------------- Testing Card: adventurer ----------------
TEST 1: choice1 = 1 = do shuffle if low on cards
deck count = 3, expected > = 2 
TEST 2: choice1 = 2 = +1 card
hand count = 7, expected = 7
TEST 3: choice1 = 3 = -1 discard
hand count = 7, expected = 6
----------------- Testing Card: council_room ----------------
TEST 1: choice1 = 1 = +4 cards
hand count = 9, expected = 9 
TEST 2: choice1 = 2 = +1 buy
buy count = 2, expected = 2
TEST 3: choice1 = 3 = +4 cards -1 discard card
hand count = 8, expected = 8
TEST 4: choice1 = 4 = +1 card for every other player
hand count = 6, expected = 6
 >>>>> SUCCESS: Testing complete council_room <<<<<

----------------- Testing Card: smithy ----------------
TEST 1: choice1 = 1 = +3 cards
t1 hand count = 8, expected = 8
TEST 2: choice1 = 2 = +3 cards -1 discard card
t2 hand count = 7, expected = 7

 >>>>> SUCCESS: Testing complete smithy <<<<<

----------------- Testing Card: village ----------------
TEST 1: choice1 = 1 = +1 card
t1 hand count = 8, expected = 8
TEST 2: choice1 = 2 = +2 actions
t2 action count = 3, expected = 3
TEST 3: choice1 = 3 = -1 card
t3 hand count = 7, expected = 7

 >>>>> SUCCESS: Testing complete village <<<<<

----------------- Testing Card: adventurer ----------------
TEST 1: choice1 = 1 = do shuffle if low on cards
deck count = 3, expected > = 2 
TEST 2: choice1 = 2 = +2 card - discard
hand count = 7, expected = 7
TEST 3: choice1 = 3 = +2cards from initial hand
hand count = 7, expected = 7

 >>>>> SUCCESS: Testing complete adventurer <<<<<

----- Unit Testing for council_room card effect. ----- 
One of more tests failed above. 
----- Unit Testing for smithy card effect. ----- 
One of more tests failed above. 
----- Unit Testing for village card effect. ----- 
One of more tests failed above. 
----- Unit Testing for adventurer card effect. ----- 
One of more tests failed above. 
Function 'updateCoins'
Lines executed:81.82% of 11
Branches executed:100.00% of 8
Taken at least once:75.00% of 8
No calls

Function 'gainCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 1

Function 'discardCard'
Lines executed:84.62% of 13
Branches executed:100.00% of 6
Taken at least once:50.00% of 6
No calls

Function 'cardEffect'
Lines executed:7.96% of 201
Branches executed:13.61% of 169
Taken at least once:2.96% of 169
Calls executed:9.09% of 55

Function 'cardIsFeast'
Lines executed:0.00% of 16
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
Calls executed:0.00% of 5

Function 'cardIsVillage'
Lines executed:100.00% of 5
No branches
Calls executed:100.00% of 2

Function 'cardIsSmithy'
Lines executed:100.00% of 5
Branches executed:100.00% of 2
Taken at least once:100.00% of 2
Calls executed:100.00% of 2

Function 'cardIsCouncilRoom'
Lines executed:100.00% of 9
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
Calls executed:100.00% of 3

Function 'cardIsAdventurer'
Lines executed:60.00% of 15
Branches executed:66.67% of 12
Taken at least once:41.67% of 12
Calls executed:50.00% of 2

Function 'getCost'
Lines executed:0.00% of 30
Branches executed:0.00% of 28
Taken at least once:0.00% of 28
No calls

Function 'drawCard'
Lines executed:36.36% of 22
Branches executed:33.33% of 6
Taken at least once:16.67% of 6
Calls executed:0.00% of 1

Function 'getWinners'
Lines executed:0.00% of 24
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
Calls executed:0.00% of 2

Function 'scoreFor'
Lines executed:0.00% of 24
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
Calls executed:0.00% of 3

Function 'isGameOver'
Lines executed:0.00% of 10
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'endTurn'
Lines executed:0.00% of 20
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'whoseTurn'
Lines executed:100.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 9
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'supplyCount'
Lines executed:0.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 3
No branches
Calls executed:0.00% of 1

Function 'numHandCards'
Lines executed:0.00% of 2
No branches
Calls executed:0.00% of 1

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 4

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
Calls executed:0.00% of 3

Function 'shuffle'
Lines executed:93.75% of 16
Branches executed:100.00% of 8
Taken at least once:87.50% of 8
Calls executed:100.00% of 2

Function 'initializeGame'
Lines executed:83.87% of 62
Branches executed:95.65% of 46
Taken at least once:80.43% of 46
Calls executed:100.00% of 5

Function 'kingdomCards'
Lines executed:0.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:0.00% of 3
No branches
No calls

Function 'compare'
Lines executed:83.33% of 6
Branches executed:100.00% of 4
Taken at least once:75.00% of 4
No calls

File 'dominion.c'
Lines executed:25.93% of 563
Branches executed:26.62% of 417
Taken at least once:17.99% of 417
Calls executed:21.05% of 95
Creating 'dominion.c.gcov'

----------------- Testing Card: council_room ----------------
TEST 1: choice1 = 1 = +4 cards
hand count = 9, expected = 9 
TEST 2: choice1 = 2 = +1 buy
buy count = 2, expected = 2
TEST 3: choice1 = 3 = +4 cards -1 discard card
hand count = 8, expected = 8
TEST 4: choice1 = 4 = +1 card for every other player
hand count = 6, expected = 6
 >>>>> SUCCESS: Testing complete council_room <<<<<

----------------- Testing Card: smithy ----------------
TEST 1: choice1 = 1 = +3 cards
t1 hand count = 8, expected = 8
TEST 2: choice1 = 2 = +3 cards -1 discard card
t2 hand count = 7, expected = 7

 >>>>> SUCCESS: Testing complete smithy <<<<<

----------------- Testing Card: village ----------------
TEST 1: choice1 = 1 = +1 card
t1 hand count = 8, expected = 8
TEST 2: choice1 = 2 = +2 actions
t2 action count = 3, expected = 3
TEST 3: choice1 = 3 = -1 card
t3 hand count = 7, expected = 7

 >>>>> SUCCESS: Testing complete village <<<<<

----------------- Testing Card: adventurer ----------------
TEST 1: choice1 = 1 = do shuffle if low on cards
deck count = 3, expected > = 2 
TEST 2: choice1 = 2 = +2 card - discard
hand count = 7, expected = 7
TEST 3: choice1 = 3 = +2cards from initial hand
hand count = 7, expected = 7

 >>>>> SUCCESS: Testing complete adventurer <<<<<

----- Unit Testing for council_room card effect. ----- 
One of more tests failed above. 
----- Unit Testing for smithy card effect. ----- 
One of more tests failed above. 
----- Unit Testing for village card effect. ----- 
One of more tests failed above. 
----- Unit Testing for adventurer card effect. ----- 
One of more tests failed above. 
File 'dominion.c'
Lines executed:25.93% of 563
Creating 'dominion.c.gcov'

